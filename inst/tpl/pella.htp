#if !defined(_pella_)
#  define _pella_

class model_data : public ad_comm{
  data_int nc;
  data_matrix Cdata;
  data_int ni;
  data_int nU;
  data_matrix Idata;
  ivector Cyear;
  dvector C;
  ivector Iyear;
  dvector u;
  ivector uNm;
  ivector uYr;
  double stepN;
  double stepSz;
  data_vector r_plui;
  data_vector k_plui;
  data_vector p_plui;
  data_vector a_plui;
  data_ivector qPh;
  data_vector qLo;
  data_vector qHi;
  data_vector qPr;
  data_ivector sPh;
  data_vector sLo;
  data_vector sHi;
  data_vector sPr;
  data_vector r_prior;
  data_vector k_prior;
  data_vector p_prior;
  data_vector a_prior;
  data_vector msy_prior;
  data_vector bmsy_prior;
  data_vector fmsy_prior;
  data_vector q_prior;
  data_vector s_prior;
  data_vector ref;
  data_number lav;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number r;
  param_init_bounded_number k;
  param_init_bounded_number a;
  param_init_bounded_number p;
  param_init_bounded_number_vector q;
  param_init_bounded_number_vector s;
  param_number pen;
  param_vector nll;
  param_vector ss;
  param_vector n;
  param_vector sm;
  param_vector _q;
  param_vector B;
  param_vector F;
  param_vector I;
  param_matrix summary;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value neglogL;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void fwd(void);
  void qs(void);
  void ll(void);
  void setSummary(void);

};
#endif
